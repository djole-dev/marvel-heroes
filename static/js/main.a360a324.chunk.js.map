{"version":3,"sources":["components/Card.js","AppContext.js","marvel.png","components/Pagination.js","components/Search.js","App.js","reportWebVitals.js","index.js"],"names":["Card","id","title","img","appCont","useContext","AppContext","bookmarkAHero","bookmark","length","setBookmark","prevArr","localStorage","setItem","JSON","stringify","console","log","contains","i","unbookmarkAHero","newIndex","newArray","splice","prevArray","className","src","alt","switcher","onClick","renderBookmark","createContext","AppProvider","children","useState","input","setInput","heroes","setHeroes","currentPage","setCurrentPage","heroesPerPage","setHeroesPerPage","parse","getItem","fetchData","a","axios","process","response","data","code","results","indexOfLastHero","indexOfFirstHero","renderHeroes","slice","map","hero","name","thumbnail","path","renderBookmarkedHeroes","Provider","value","paginate","pageNumber","whatToRender","Pagination","totalHeroes","activePage","pageNumbers","Math","ceil","push","number","Search","Logo","placeholder","type","onChange","e","target","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a360a324.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\r\nimport { AppContext } from \"../AppContext\";\r\nimport \"./Card.css\";\r\nimport BookmarkBorderIcon from \"@material-ui/icons/BookmarkBorder\";\r\nimport BookmarkIcon from \"@material-ui/icons/Bookmark\";\r\n\r\nfunction Card({ id, title, img }){\r\n  const appCont = useContext(AppContext);\r\n\r\n  //------------------------------------Logic for bookmarking a hero----------------------------------------------------------\r\n  const bookmarkAHero = () => {\r\n    if (appCont.bookmark.length === 0) {// Checking if local storage has 0 bookmarked heroes\r\n      appCont.setBookmark((prevArr) => [...prevArr, { id, title, img }]);\r\n      localStorage.setItem(\r\n        \"bookmarked\",\r\n        JSON.stringify([...appCont.bookmark, {id,title,img}])\r\n      );\r\n      return;\r\n    }\r\n    console.log(\"bookmark\");\r\n    //Then checking if hero already exists in localstorage (prevents duplicates)\r\n    let contains = false;\r\n    for (let i = 0; i < appCont.bookmark.length; i++) {\r\n      if (appCont.bookmark[i].id === id) {\r\n        contains = true;\r\n      }\r\n    }\r\n    if (contains === false) {\r\n      //If hero doesn't exists in local storage, add hero\r\n      appCont.setBookmark((prevArr) => [...prevArr, { id, title, img }]);\r\n      localStorage.setItem(\r\n        \"bookmarked\",\r\n        JSON.stringify([...appCont.bookmark, { id, title, img }])\r\n      );\r\n    } else {\r\n      //If hero already exist, do nothing, set flag to false\r\n      contains = false;\r\n    }\r\n  };\r\n\r\n  //-------------------------------------------------------Delete hero from bookmarks---------------------------------------------------\r\n  const unbookmarkAHero = () => {\r\n    //we don't check here if hero is in local storage beacause only bookmarked hereos have this function\r\n    let newArray = appCont.bookmark;\r\n    let newIndex;\r\n    for (let i = 0; i < newArray.length; i++) {\r\n      if (newArray[i].id === id) {\r\n        newIndex = i; //We find the index of the hero we want to delete\r\n      }\r\n    }\r\n    if (newIndex > -1) {\r\n      //Than we splice the array and update the local storage with a new array\r\n      console.log(\"splice\");\r\n      newArray.splice(newIndex, 1);\r\n    }\r\n\r\n    appCont.setBookmark((prevArray) => [...newArray]);\r\n\r\n    localStorage.setItem(\"bookmarked\", JSON.stringify(newArray));\r\n  };\r\n\r\n  //---------------------------------------------------Checking if heroes are bookmarked or not, (Rendering bookmark or unbookmark)----------\r\n  const renderBookmark = () => {\r\n    let switcher = false;\r\n    \r\n    if (appCont.bookmark.length === 0) {\r\n      return (\r\n        <button onClick={bookmarkAHero}>\r\n          <BookmarkBorderIcon />\r\n          Bookmark\r\n        </button>\r\n      );\r\n    }\r\n    for (let i = 0; i < appCont.bookmark.length; i++) {\r\n      if (appCont.bookmark[i].id === id) {\r\n        switcher = true;\r\n      }\r\n    }\r\n    if (switcher === true) {\r\n      switcher = false;\r\n      return (\r\n        <button onClick={unbookmarkAHero}>\r\n          <BookmarkIcon />\r\n          Unbookmark\r\n        </button>\r\n      );\r\n    } else {\r\n      switcher = false;\r\n      return (\r\n        <button onClick={bookmarkAHero}>\r\n          <BookmarkBorderIcon />\r\n          Bookmark\r\n        </button>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='card'>\r\n      <img src={img} alt='' className='card__image' />\r\n      <div className='card__name'>{title}</div>\r\n      {renderBookmark()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import { createContext, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport Card from \"./components/Card\";\r\n\r\nexport const AppContext = createContext();\r\n\r\nexport const AppProvider = ({ children }) => {\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const [heroes, setHeroes] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [heroesPerPage, setHeroesPerPage] = useState(20);\r\n\r\n  const [bookmark, setBookmark] = useState(JSON.parse(localStorage.getItem(\"bookmarked\")) || []);\r\n\r\n  //-----------------------------------Getting bookmarked heroes from local storage-----------------------------------------------------\r\n  /*\r\n  useEffect(() => {\r\n    setBookmark(JSON.parse(localStorage.getItem(\"bookmarked\")) || \"[]\");\r\n  },[]);*/\r\n\r\n  //-------------------------------------------Fetching data from API-------------------------------------------------------------------\r\n  const fetchData = async (input) => {\r\n    setInput(input);\r\n    if (input !== \"\") {\r\n      const response = await axios(\r\n        `https://gateway.marvel.com:443/v1/public/characters?nameStartsWith=${input}&limit=100&ts=1&apikey=${process.env.REACT_APP_MARVEL_KEY}&hash=${process.env.REACT_APP_MARVEL_HASH}`\r\n      );\r\n      if (response.data.code === 200) {\r\n        setHeroes(response.data.data.results);\r\n      }\r\n    }\r\n  };\r\n\r\n  //----------------------------Setting up pagination and currentHeroes that are currently on screen----------------------------------\r\n  const indexOfLastHero = currentPage * heroesPerPage;\r\n  const indexOfFirstHero = indexOfLastHero - heroesPerPage;\r\n  const currentHeroes = heroes.slice(indexOfFirstHero, indexOfLastHero);\r\n\r\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\r\n\r\n  //-----------------------------------Rendering heroes that you searched for or bookmarked heroes----------------------------------------------\r\n  const renderHeroes = currentHeroes.map((hero) => {\r\n    return (\r\n      <Card\r\n        key={hero.id}\r\n        id={hero.id}\r\n        title={hero.name}\r\n        img={hero.thumbnail.path + \"/portrait_xlarge.jpg\"}\r\n      />\r\n    );\r\n  });\r\n\r\n  const renderBookmarkedHeroes = JSON.parse(\r\n    localStorage.getItem(\"bookmarked\") || \"[]\"\r\n  ).map((hero) => {\r\n    return (\r\n      <Card key={hero.id} id={hero.id} title={hero.title} img={hero.img} />\r\n    );\r\n  });\r\n\r\n  // ---------------------------------Decision making what to render on the screen depending on the input field state----------------------------\r\n  const whatToRender = () => {\r\n    if (input !== \"\") {\r\n      return renderHeroes;\r\n    } else if (input === \"\") {\r\n      return renderBookmarkedHeroes;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        bookmark,\r\n        setBookmark,\r\n        input,\r\n        setInput,\r\n        heroes,\r\n        setHeroes,\r\n        currentPage,\r\n        setCurrentPage,\r\n        heroesPerPage,\r\n        setHeroesPerPage,\r\n        fetchData,\r\n        paginate,\r\n        whatToRender,\r\n      }}>\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/marvel.4a9b7724.png\";","import React from \"react\";\r\nimport \"./Pagination.css\";\r\n\r\nfunction Pagination({ heroesPerPage, totalHeroes, paginate, activePage }) {\r\n  const pageNumbers = [];\r\n\r\n  for (let i = 1; i <= Math.ceil(totalHeroes / heroesPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n  \r\n  return (\r\n    <div className='pagination'>\r\n      <ul>\r\n        {pageNumbers.map((number) =>\r\n          activePage === number ? (\r\n            <li\r\n              key={number}\r\n              className='numb active'\r\n              onClick={() => paginate(number)}>\r\n              <span>{number}</span>\r\n            </li>\r\n          ) : (\r\n            <li key={number} className='numb' onClick={() => paginate(number)}>\r\n              <span>{number}</span>\r\n            </li>\r\n          )\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pagination;\r\n","import React, { useContext } from \"react\";\r\nimport { AppContext } from \"../AppContext\";\r\nimport \"./Search.css\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport Logo from \"../marvel.png\";\r\nimport Pagination from \"./Pagination\";\r\n\r\n//const hash = \"a9ed5d73e1150f09edcb892103eb483d\";\r\n\r\nfunction Search() {\r\n  const appCont = useContext(AppContext);\r\n\r\n  return (\r\n    <div className='search'>\r\n      <div className='search__container'>\r\n        <img src={Logo} alt='' className='search__logo' />\r\n        <SearchIcon className='search__icon' />\r\n        <input\r\n          placeholder='Enter the name of your Marvel superhero...'\r\n          className='search__input'\r\n          type='text'\r\n          onChange={(e) => {\r\n            appCont.fetchData(e.target.value);\r\n          }}\r\n        />\r\n      </div>\r\n      <div className='search__result'>{appCont.whatToRender()}</div>\r\n      <div className='search__pagination'>\r\n        {appCont.input === \"\" ? null : (\r\n          <Pagination\r\n            heroesPerPage={appCont.heroesPerPage}\r\n            totalHeroes={appCont.heroes.length}\r\n            paginate={appCont.paginate}\r\n            activePage={appCont.currentPage}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Search from \"./components/Search\";\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Search />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { AppProvider } from \"./AppContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n      <App />\n    </AppProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}